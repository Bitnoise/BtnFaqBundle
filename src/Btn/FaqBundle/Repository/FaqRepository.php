<?php

namespace Btn\FaqBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Btn\FaqBundle\Entity\FaqCategory;

/**
 * FaqRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FaqRepository extends EntityRepository
{
    public function getSearchQuery($conditions)
    {
        $qb = $this->createQueryBuilder('f')
            ->select('f')
        ;
        if (!empty($conditions) && is_array($conditions)) {
            $expr = call_user_func_array(array($qb->expr(), 'andx'), $conditions);
            $qb->where($expr);
        }

        return $qb;
    }

    protected function getBaseQueryBuilder($visible = 1)
    {
        return $this
            ->createQueryBuilder('f')
            ->join('f.category', 'c')
            ->where('f.visible = :visible')
            ->setParameter(':visible', $visible)
        ;
    }

    public function getFindVisibleForCategoryQuery(FaqCategory $category)
    {
        $query = $this
            ->getBaseQueryBuilder()
            ->andWhere('f.category = :category')
            ->addOrderBy('f.position', 'ASC')
            ->setParameter(':category', $category)
            ->getQuery()
        ;

        return $query;
    }

    public function findVisibleForCategory(FaqCategory $category)
    {
        return $this->getFindVisibleForCategoryQuery($category)->getResult();
    }

    public function findLastChanges($limit)
    {
        $query = $this
            ->getBaseQueryBuilder()
            ->orderBy('f.updatedAt', 'DESC')
            ->getQuery()
            ->setMaxResults($limit)
        ;

        return $query->getResult();
    }

    public function findLastChangesInCategory(FaqCategory $category, $limit)
    {
        $query = $this
            ->getBaseQueryBuilder()
            ->andWhere('f.category = :category')
            ->orderBy('f.updatedAt', 'DESC')
            ->setParameter(':category', $category)
            ->getQuery()
            ->setMaxResults($limit)
        ;

        return $query->getResult();
    }

    public function getFindByStringQuery($string)
    {
        $qb = $this->getBaseQueryBuilder();

        $query = $qb
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('f.question', ':string'),
                    $qb->expr()->like('f.answer', ':string')
                )
            )
            ->setParameter(':string', '%'.$string.'%')
            ->getQuery()
        ;

        return $query;
    }

    public function findByString($string)
    {
        return $this->getFindByStringQuery($string)->getResult();
    }
}
